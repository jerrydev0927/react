"%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values."
"%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"
"%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components"
"%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components"
"%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored."
"%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s"
"%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?"
"%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate()."
"%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?"
"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value."
"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?"
"%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used."
"%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead."
"%s is accessing findNodeHandle inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead."
"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead."
"%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node"
"%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node"
"%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?"
"%s must not return anything besides a function, which is used for clean-up.%s"
"%s objects cannot be rendered as text children. Try formatting it using toString().%s"
"%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders."
"%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array."
"%s uses the legacy childContextTypes API which is no longer supported. Use React.createContext() instead."
"%s uses the legacy contextTypes API which is no longer supported. Use React.createContext() with React.useContext() instead."
"%s uses the legacy contextTypes API which is no longer supported. Use React.createContext() with static contextType instead."
"%s(...) is deprecated in plain JavaScript React classes. %s"
"%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component."
"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s."
"%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?"
"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`."
"%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed."
"%s(...): childContextTypes cannot be defined on a function component."
"%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it."
"%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead."
"%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead."
"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext()."
"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined."
"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined."
"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false."
"%s.state: must be set to an object or null"
"%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI."
"%s: Function components do not support contextType."
"%s: Function components do not support getDerivedStateFromProps."
"%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly."
"%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead."
"%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead."
"%s: Unsafe read of a mutable value during render.\n\nReading from a ref during render is only safe if:\n1. The ref value has not been updated, or\n2. The ref holds a lazily-initialized value that is only set once.\n"
"%s: Unsafe write of a mutable value during render.\n\nWriting to a ref during render is only safe if the ref holds a lazily-initialized value that is only set once.\n"
"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)"
"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)"
"%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method."
"%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method."
"%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method."
"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only."
"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
"<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements."
"<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?"
"A %s is using the same href \"%s\" as a %s. This is always an error and React will only keep the first preload for any given href, discarding subsequent instances. To fix, find where you are using this href in link tags or in calls to ReactDOM.preload() or ReactDOM.preinit() and either make the Resource types agree or update the hrefs to be distinct for different Resource types."
"A %s with %s \"%s\" has props that disagree with those found on %s. Resources always use the props that were provided the first time they are encountered so any differences will be ignored. Please update Resources that share an %s to have props that agree. The differences are described below.%s"
"A %s with %s \"%s\" received new props with different values from the props used when this Resource was first rendered. React will only use the props provided when this resource was first rendered until a new %s is provided. Unlike conventional DOM elements, Resources instances do not have a one to one correspondence with Elements in the DOM and as such, every instance of a Resource for a single Resource identifier (%s) must have props that agree with each other. The differences are described below.%s"
"A %s with href \"%s\" did not specify the crossOrigin prop. Font preloads must always use anonymouse CORS mode. To fix add an empty string, \"anonymous\", or any other string value except \"use-credentials\" for the crossOrigin prop of all font preloads."
"A %s with href \"%s\" specified a crossOrigin value of \"use-credentials\". Font preloads must always use anonymouse CORS mode. To fix use an empty string, \"anonymous\", or any other string value except \"use-credentials\" for the crossOrigin prop of all font preloads."
"A <link> is rendering with an invalid href: %s. When a link does not have a valid href prop it is not represented in the DOM. If this is intentional, instead do not render the <link> anymore."
"A <link> is rendering with an invalid rel: %s. When a link does not have a valid rel prop it is not represented in the DOM. If this is intentional, instead do not render the <link> anymore."
"A <link> previously rendered as a %s but was updated with an invalid href prop: %s. When a link does not have a valid href prop it is not represented in the DOM. If this is intentional, instead do not render the <link> anymore."
"A <link> previously rendered as a %s with rel \"%s\" but was updated with an invalid rel: %s. When a link does not have a valid rel prop it is not represented in the DOM. If this is intentional, instead do not render the <link> anymore."
"A cache instance was released after it was already freed. This likely indicates a bug in React."
"A cache instance was retained after it was already freed. This likely indicates a bug in React."
"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
"A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"
"A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"
"A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"
"A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
"A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s."
"A large precomputed chunk was passed to writeChunk without being copied. Large chunks get enqueued directly and are not copied. This is incompatible with precomputed chunks because you cannot enqueue the same precomputed chunk twice. Use \"cloneChunk\" to make a copy of this large precomputed chunk before writing it. This is a bug in React."
"A link (rel=\"stylesheet\") element with href \"%s\" has the precedence prop but also included the %s. When using %s React will opt out of Resource behavior. If you meant for this element to be treated as a Resource remove the %s. Otherwise remove the precedence prop."
"A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>"
"A pointerId must be passed to \"%s\""
"A props object containing a \"key\" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />"
"A script element was rendered with %s. If script element has children it must be a single string. Consider using dangerouslySetInnerHTML or passing a plain string as children."
"A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?"
"A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref"
"A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act"
"A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering"
"A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering"
"A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering"
"A view is reporting that a touch occurred on tag zero."
"An empty string (\"\") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string."
"An empty string (\"\") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string."
"An error occurred during hydration. The server HTML was replaced with client content in <%s>."
"An invalid container has been provided. This may indicate that another renderer is being used in addition to the test renderer. (For example, ReactDOM.createPortal inside of a ReactTestRenderer tree.) This is not supported."
"An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s"
"An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act"
"Assignment to read-only property will result in a no-op: `%s`"
"Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."
"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"
"Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?"
"Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component."
"Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
"Cannot find single active touch."
"Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."
"Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."
"Cannot record touch end without a touch start.\nTouch End: %s\nTouch Bank: %s"
"Cannot record touch move without a touch start.\nTouch Move: %s\nTouch Bank: %s"
"Cannot render <%s> outside the main document. Try moving it into the root <head> tag."
"Cannot render a <link rel=\"stylesheet\" /> as a descendent of an <svg> element without knowing its precedence. Consider adding precedence=\"default\" or moving it above the <svg> ancestor."
"Cannot render a <link rel=\"stylesheet\" /> outside the main document without knowing its precedence. Consider adding precedence=\"default\" or moving it into the root <head> tag."
"Cannot render a <link> with onLoad or onError listeners as a descendent of <svg>. Try removing onLoad={...} and onError={...} or moving it above the <svg> ancestor."
"Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
"Cannot render a <script> with onLoad or onError listeners as a descendent of an <svg> element. Try removing onLoad={...} and onError={...} or moving it above the ancestor <svg> element."
"Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."
"Cannot render a sync or defer <script> as a descendent of an <svg> element. Try adding async=\"\" or moving it above the ancestor <svg> element."
"Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async=\"\" or moving it into the root <head> tag."
"Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render"
"Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
"Changing the name of a tracing marker after mount is not supported. To remount the tracing marker, pass it a new key."
"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?"
"Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref"
"Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref"
"Consumer pattern is not supported by ReactServerContext"
"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
"Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
"Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
"Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported."
"Did not expect a listenToNativeEvent() call for \"%s\" in the bubble phase. This is a bug in React. Please file an issue."
"Did not expect a listenToNonDelegatedEvent() call for \"%s\". This is a bug in React. Please file an issue."
"Did not expect server HTML to contain a <%s> in <%s>."
"Did not expect server HTML to contain the text node \"%s\" in <%s>."
"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
"Dispatching inst must not be null"
"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"
"Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information."
"Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information."
"Encountered a script tag while rendering React component. Scripts inside React components are never executed when rendering on the client. Consider using template tag instead (https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template)."
"Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version."
"Ended a touch event which was not counted in `trackedTouchCount`."
"EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode."
"EventPluginUtils: Invalid `event`."
"EventRegistry: More than one plugin attempted to publish the same registration name, `%s`."
"Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue."
"Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue."
"Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue."
"Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue."
"Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue."
"Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue."
"Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue."
"Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue."
"Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead."
"Expected `%s` listener to be a function, instead got a value of `%s` type."
"Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested."
"Expected an empty stack. Something was not reset properly."
"Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."
"Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."
"Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
"Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue."
"Expected server HTML to contain a matching <%s> in <%s>."
"Expected server HTML to contain a matching text node for \"%s\" in <%s>."
"Expected to be hydrating. This is a bug in React. Please file an issue."
"Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
"Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
"Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s."
"Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s."
"Extra attributes from the server: %s"
"Factory.type is deprecated. Access the class directly before passing it to createFactory."
"Failed %s type: %s"
"Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here."
"Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s"
"Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."
"Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s"
"Internal React error: Expected static flag was missing. Please notify the React team."
"Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
"Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase."
"Invalid ARIA attribute `%s`. Did you mean `%s`?"
"Invalid DOM property `%s`. Did you mean `%s`?"
"Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props"
"Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props"
"Invalid attribute `ref` supplied to `React.Fragment`."
"Invalid attribute name: `%s`"
"Invalid event handler property `%s`. Did you mean `%s`?"
"Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`."
"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
"Invalid key type. Expected a string, number, symbol, or boolean, but instead received: %s\n\nTo use non-primitive values as keys, you must pass a hash function as the second argument to createResource()."
"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props."
"Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior "
"Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior "
"It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs."
"Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context"
"Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
"Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)"
"Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing."
"Mutable source subscribe function must return an unsubscribe function."
"Only createServerContext is supported in Server Components."
"Only plain objects can be passed to Client Components from Server Components. %s objects are not supported.%s"
"Only plain objects can be passed to Client Components from Server Components. Classes or other objects with methods are not supported.%s"
"Only plain objects can be passed to Client Components from Server Components. Objects with symbol properties like %s are not supported.%s"
"Only plain objects can be passed to Client Components from Server Components. Objects with toJSON methods are not supported. Convert it manually to a simple value before passing it to props.%s"
"Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."
"Popping the context provider did not return back to the original snapshot. This is a bug in React."
"Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead."
"Prop `%s` did not match. Server: %s Client: %s"
"React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
"React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element."
"React elements are not allowed in ServerContext"
"React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"React instrumentation encountered an error: %s"
"React instrumentation encountered an error: %s."
"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
"React was unable to patch the fetch() function in this environment. Suspensey APIs might not work correctly as a result."
"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s"
"React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead."
"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s"
"React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."
"React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."
"ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"
"ReactDOM.preinit() expected the first argument to be a string representing an href but found %s instead."
"ReactDOM.preinit() expected the second argument to be an options argument containing at least an \"as\" property specifying the Resource type. It found %s instead. Currently, valid resource types for for preinit are \"style\" and \"script\". The href for the preinit call where this warning originated is \"%s\"."
"ReactDOM.preinit() expected the second argument to be an options argument containing at least an \"as\" property specifying the Resource type. It found %s instead. The href for the preload call where this warning originated is \"%s\"."
"ReactDOM.preload() expected a valid \"as\" type in the options (second) argument but found %s instead. Please use one of the following valid values instead: %s. The href for the preload call where this warning originated is \"%s\"."
"ReactDOM.preload() expected the first argument to be a string representing an href but found %s instead."
"ReactDOM.preload() expected the second argument to be an options argument containing at least an \"as\" property specifying the Resource type. It found %s instead. The href for the preload call where this warning originated is \"%s\"."
"ReactDOM.preload() was called with an \"as\" type of \"font\" and with a \"crossOrigin\" option of \"use-credentials\". Fonts preloading must use crossOrigin \"anonymous\" to be functional. Please update your font preload to omit the crossOrigin option or change it to any other value than \"use-credentials\" (Browsers default all other values to anonymous mode). The href for the preload call where this warning originated is \"%s\""
"ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"
"ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"
"ReactTestUtils.mockComponent() is deprecated. Use shallow rendering or jest.mock() instead.\n\nSee https://reactjs.org/link/test-utils-mock-component for more information."
"Received NaN for the `%s` attribute. If this is expected, cast the value to a string."
"Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}."
"Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead."
"Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string."
"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
"Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?"
"Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s."
"Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"
"Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?"
"Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"
"Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"
"ServerContext can only have a value prop and children. Found: %s"
"Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'."
"Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s."
"Should have found matching lanes. This is a bug in React."
"State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
"Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead."
"Text content did not match. Server: \"%s\" Client: \"%s\""
"Text strings must be rendered within a <Text> component."
"Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"
"The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React."
"The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead."
"The `%s` prop supplied to <select> must be a scalar value if `multiple` is false."
"The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s"
"The `%s` prop supplied to <select> must be an array if `multiple` is true."
"The `%s` prop supplied to <select> must be an array if `multiple` is true.%s"
"The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
"The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
"The current testing environment is not configured to support act(...)"
"The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s"
"The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"
"The main 'use-sync-external-store' entry point is not supported; all it does is re-export useSyncExternalStore from the 'react' package, so it only works with React 18+.\n\nIf you wish to support React 16 and 17, import from 'use-sync-external-store/shim' instead. It will fall back to a shimmed implementation when the native one is not available.\n\nIf you only support React 18+, you can import directly from 'react'."
"The parent context is not the expected context. This is probably a bug in React."
"The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here."
"The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here."
"The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here."
"The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here."
"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here."
"The result of getServerSnapshot should be cached to avoid an infinite loop"
"The result of getSnapshot should be cached to avoid an infinite loop"
"The seed argument is not enabled outside experimental channels."
"The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter."
"There was still abortable task at the root when we closed. This is a bug in React."
"This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."
"This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://reactjs.org/link/event-pooling for more information."
"Touch identifier %s is greater than maximum supported %s which causes performance issues backfilling array locations for all of the indices."
"Touch with identifier %s already exists. Did not record touch start."
"Touch with identifier %s does not exist. Cannot record touch end without a touch start."
"Touch with identifier %s does not exist. Cannot record touch move without a touch start."
"Unexpected Fiber popped."
"Unexpected pop."
"Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef()."
"Unexpected return value from a callback ref in %s. A callback ref should not return a function."
"Unexpected type for suspenseCallback."
"Unexpected type of work: %s, Currently only function components are replayed after suspending. This is a bug in React."
"Unexpectedly popped too many stack frames. This is a bug in React."
"Unknown ARIA attribute `%s`. Did you mean `%s`?"
"Unknown event handler property `%s`. It will be ignored."
"Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles"
"Unsupported style property %s. Did you mean %s?"
"Unsupported vendor-prefixed style property %s. Did you mean %s?"
"Use the `defaultValue` or `value` props instead of setting children on <textarea>."
"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
"Using 'dangerouslySetInnerHTML' in an svg element with Trusted Types enabled in an Internet Explorer will cause the trusted value to be converted to string. Assigning string to 'innerHTML' will throw an error if Trusted Types are enforced. You can try to wrap your svg element inside a div and use 'dangerouslySetInnerHTML' on the enclosing div instead."
"Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."
"Using Maps as children is not supported. Use an array of keyed ReactElements instead."
"Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s"
"Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s"
"Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s"
"Warning: ref.measureLayout must be called with a node handle or a ref to a native component."
"Warning: ref.measureLayout must be called with a ref to a native component."
"Warning: setNativeProps is not currently supported in Fabric"
"We should not be hydrating here. This is a bug in React. Please file a bug."
"While creating a %s for href \"%s\" a %s for this same href was found. When preloading a stylesheet the \"as\" prop must be of type \"style\". This most likely ocurred by rendering a preload link with an incorrect \"as\" prop or by calling ReactDOM.preload with an incorrect \"as\" option."
"While creating a %s for href \"%s\" a %s for this same url was found. When preloading a script the \"as\" prop must be of type \"script\". This most likely ocurred by rendering a preload link with an incorrect \"as\" prop or by calling ReactDOM.preload with an incorrect \"as\" option."
"You are accessing \"digest\" from the errorInfo object passed to onRecoverableError. This property is deprecated and will be removed in a future version of React. To access the digest of an Error look for this property on the Error instance itself."
"You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?"
"You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?"
"You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?"
"You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."
"You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."
"You are importing createRoot from \"react-dom\" which is not supported. You should instead import it from \"react-dom/client\"."
"You are importing hydrateRoot from \"react-dom\" which is not supported. You should instead import it from \"react-dom/client\"."
"You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first."
"You are setting the style `{ %s: ... }` as a prop. You should nest it in a style object. E.g. `{ style: { %s: ... } }`"
"You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
"You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"
"You did not run Node.js with the `--conditions react-server` flag. Any \"react-server\" override will only work with ESM imports."
"You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"
"You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."
"You passed a second argument to root.render(...) but it only accepts one argument."
"You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
"You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
"You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "
"\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?"
"\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?"
"\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead."
"\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead."
"`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape."
"`Infinity` is an invalid value for the `%s` css style property."
"`NaN` is an invalid value for the `%s` css style property."
"`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
"`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components."
"`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components."
"acquireSingletonInstance was called with an element type that is not supported. This is a bug in React."
"componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s"
"componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s"
"componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s"
"componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s"
"contextType was defined as an instance property on %s. Use a static property to define contextType instead."
"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead."
"copyWithRename() expects paths of the same length"
"copyWithRename() expects paths to be the same except for the deepest key"
"createPreloadResource was called when a preload Resource matching the same href already exists. This is a bug in React."
"createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app."
"createScriptResource was called when a script Resource matching the same src already exists. This is a bug in React."
"createStyleResource was called when a style Resource matching the same href already exists. This is a bug in React."
"disabledDepth fell below zero. This is a bug in React. Please file an issue."
"dispatchCommand was called with a ref that isn't a native component. Use React.forwardRef to get access to the underlying native component"
"flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."
"forwardRef render functions accept exactly two parameters: props and ref. %s"
"forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?"
"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
"forwardRef requires a render function but was given %s."
"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead."
"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead."
"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?"
"getInspectorDataForViewAtPoint expects to receive a host component"
"hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."
"insertResourceInstanceBefore was called with a stylesheet. Stylesheets must be inserted with insertStyleInstance instead. This is a bug in React."
"lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))"
"lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?"
"memo: The first argument must be a component. Instead received: %s"
"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead."
"render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app."
"render(...): Expected the last optional `callback` argument to be a function. Instead received: %s."
"render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container."
"render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container."
"render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."
"render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
"renderToNodeStream is deprecated. Use renderToPipeableStream instead."
"root.finishedLanes should not be empty during a commit. This is a bug in React."
"sendAccessibilityEvent was called with a ref that isn't a native component. Use React.forwardRef to get access to the underlying native component"
"unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
"unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s"
"unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React."
"useInsertionEffect must not schedule updates."
"useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes."
"validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s"
"validateDOMNesting(...): %s cannot appear as a descendant of <%s>."
"validateDOMNesting: when childText is passed, childTag should be null"
"validateDOMNesting: when childText or childTag must be provided"
